cmake_minimum_required(VERSION 3.6)
project(librfsim)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(SOURCE_FILES Animal.cpp Animal.h Coordinates.h Matrix.h RNGController.h Xoroshiro256plus.h Rabbit.cpp
        Rabbit.h Landscape.cpp Landscape.h Cell.cpp Cell.h Fox.cpp Fox.h)
set(PYTHON_SOURCE_FILES PyWrapper.h clib.cpp clib.h)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# add_executable(lib ${SOURCE_FILES} main.cpp)

if (APPLE)
    set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
    set(CMAKE_FIND_FRAMEWORK "LAST")
elseif(WINDOWS)
    set(CMAKE_SHARED_LIBRARY_SUFFIX ".pyd")
endif()
add_library(rfsim SHARED ${SOURCE_FILES} ${PYTHON_SOURCE_FILES})
if (DEFINED ENV{CONDA_PREFIX})
    message(STATUS "Installing inside conda env at $ENV{PREFIX}")
    set(CMAKE_INSTALL_PREFIX "$ENV{PREFIX}")
    set(CMAKE_PREFIX_PATH "$ENV{PREFIX}")
endif()

if(NOT WINDOWS)
    if(PYTHON_CPPFLAGS)

        set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${PYTHON_CPPFLAGS}")
    endif()
    if(PYTHON_LDFLAGS)
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${PYTHON_LDFLAGS}")
    endif()
endif()
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})
link_directories(${PYTHON_LIBRARIES})
if(NUMPY_INCLUDE_DIR)
    message(STATUS "NUMPY INCLUDE DIR: ${NUMPY_INCLUDE_DIR}")
    target_include_directories(rfsim PRIVATE ${NUMPY_INCLUDE_DIR})
endif()
#find_package(Boost 1.64.0 REQUIRED COMPONENTS system python)
message(STATUS "CPPFLAGS: ${PYTHON_CPPFLAGS}")


if(WINDOWS)
    SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${OUTPUT_BINDIR} CACHE PATH "build directory")
    target_link_libraries(rfsim ${PYTHON_LIBRARIES})
    message(STATUS "Detecting libraries for windows")
endif()
